/*
Deployment script for Tickbox.Core

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Tickbox.Core"
:setvar DefaultFilePrefix "Tickbox.Core"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Specialism]...';


GO
CREATE TABLE [dbo].[Specialism] (
    [SpecialismId]   INT           IDENTITY (1, 1) NOT NULL,
    [SpecialismDesc] VARCHAR (100) NOT NULL,
    [IsScaffold]     BIT           NOT NULL,
    CONSTRAINT [PK_Specialism] PRIMARY KEY CLUSTERED ([SpecialismId] ASC)
);


GO
PRINT N'Creating [dbo].[NodeSpecialism]...';


GO
CREATE TABLE [dbo].[NodeSpecialism] (
    [NodeSpecialismId] INT           IDENTITY (1, 1) NOT NULL,
    [NodeId]           INT           NOT NULL,
    [SpecialismId]     INT           NOT NULL,
    [SequenceOrder]    INT           NOT NULL,
    [Guidelines]       VARCHAR (MAX) NOT NULL,
    [DocumentLink]     VARCHAR (MAX) NOT NULL,
    [IsScaffold]       BIT           NOT NULL,
    CONSTRAINT [PK_NodeSpecilaism] PRIMARY KEY CLUSTERED ([NodeSpecialismId] ASC)
);


GO
PRINT N'Creating [dbo].[Node]...';


GO
CREATE TABLE [dbo].[Node] (
    [NodeId]              INT           IDENTITY (1, 1) NOT NULL,
    [NodeTitle]           VARCHAR (150) NOT NULL,
    [NodeDesc]            VARCHAR (MAX) NOT NULL,
    [ChildrenMultiSelect] BIT           NOT NULL,
    CONSTRAINT [PK_Node] PRIMARY KEY CLUSTERED ([NodeId] ASC)
);


GO
PRINT N'Creating [dbo].[Template]...';


GO
CREATE TABLE [dbo].[Template] (
    [TemplateId]   INT           IDENTITY (1, 1) NOT NULL,
    [Name]         VARCHAR (100) NOT NULL,
    [DocumentLink] VARCHAR (MAX) NOT NULL,
    [IsScaffold]   BIT           NOT NULL,
    CONSTRAINT [PK_Template] PRIMARY KEY CLUSTERED ([TemplateId] ASC)
);


GO
PRINT N'Creating [dbo].[Taxonomy]...';


GO
CREATE TABLE [dbo].[Taxonomy] (
    [TaxonomyId] INT           IDENTITY (1, 1) NOT NULL,
    [TemplateId] INT           NOT NULL,
    [Title]      VARCHAR (150) NOT NULL,
    [IsScaffold] BIT           NOT NULL,
    CONSTRAINT [PK_Taxonomy] PRIMARY KEY CLUSTERED ([TaxonomyId] ASC)
);


GO
PRINT N'Creating [dbo].[TaxonomySpecialism]...';


GO
CREATE TABLE [dbo].[TaxonomySpecialism] (
    [TaxonomyId]   INT NOT NULL,
    [SpecialismId] INT NOT NULL,
    CONSTRAINT [PK_TaxnonomySpecialism] PRIMARY KEY CLUSTERED ([TaxonomyId] ASC, [SpecialismId] ASC)
);


GO
PRINT N'Creating [dbo].[TreeNode]...';


GO
CREATE TABLE [dbo].[TreeNode] (
    [TreeNodeId]       INT IDENTITY (1, 1) NOT NULL,
    [TaxonomyId]       INT NOT NULL,
    [ParentTreeNodeId] INT NULL,
    [NodeId]           INT NOT NULL,
    [IsScaffold]       BIT NOT NULL,
    CONSTRAINT [PK_TreeNode] PRIMARY KEY CLUSTERED ([TreeNodeId] ASC)
);


GO
PRINT N'Creating FK_NodeSpecialism_Node...';


GO
ALTER TABLE [dbo].[NodeSpecialism]
    ADD CONSTRAINT [FK_NodeSpecialism_Node] FOREIGN KEY ([NodeId]) REFERENCES [dbo].[Node] ([NodeId]);


GO
PRINT N'Creating FK_NodeSpecialism_Specialism...';


GO
ALTER TABLE [dbo].[NodeSpecialism]
    ADD CONSTRAINT [FK_NodeSpecialism_Specialism] FOREIGN KEY ([SpecialismId]) REFERENCES [dbo].[Specialism] ([SpecialismId]);


GO
PRINT N'Creating FK_Taxonomy_Template...';


GO
ALTER TABLE [dbo].[Taxonomy]
    ADD CONSTRAINT [FK_Taxonomy_Template] FOREIGN KEY ([TemplateId]) REFERENCES [dbo].[Template] ([TemplateId]);


GO
PRINT N'Creating FK_TaxonomySpecialism_Taxonomy...';


GO
ALTER TABLE [dbo].[TaxonomySpecialism]
    ADD CONSTRAINT [FK_TaxonomySpecialism_Taxonomy] FOREIGN KEY ([TaxonomyId]) REFERENCES [dbo].[Taxonomy] ([TaxonomyId]);


GO
PRINT N'Creating FK_TaxonomySpecialism_Specialism...';


GO
ALTER TABLE [dbo].[TaxonomySpecialism]
    ADD CONSTRAINT [FK_TaxonomySpecialism_Specialism] FOREIGN KEY ([SpecialismId]) REFERENCES [dbo].[Specialism] ([SpecialismId]);


GO
PRINT N'Creating FK_TreeNode_Node...';


GO
ALTER TABLE [dbo].[TreeNode]
    ADD CONSTRAINT [FK_TreeNode_Node] FOREIGN KEY ([NodeId]) REFERENCES [dbo].[Node] ([NodeId]);


GO
PRINT N'Creating FK_TreeNode_TreeNode...';


GO
ALTER TABLE [dbo].[TreeNode]
    ADD CONSTRAINT [FK_TreeNode_TreeNode] FOREIGN KEY ([ParentTreeNodeId]) REFERENCES [dbo].[TreeNode] ([TreeNodeId]);


GO
PRINT N'Creating FK_TreeNode_Taxonomy...';


GO
ALTER TABLE [dbo].[TreeNode]
    ADD CONSTRAINT [FK_TreeNode_Taxonomy] FOREIGN KEY ([TaxonomyId]) REFERENCES [dbo].[Taxonomy] ([TaxonomyId]);


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.'
GO
